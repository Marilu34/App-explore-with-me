{
	"info": {
		"_postman_id": "26791208-f7c1-4b44-a86b-a621cf67609f",
		"name": "feature_comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26970642"
	},
	"item": [
		{
			"name": "comments",
			"item": [
				{
					"name": "CreateComment1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка статуса ответа\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Check if the response has an id field\r",
									"pm.test(\"Response has an id field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"// Check if the response has an author field\r",
									"pm.test(\"Response has an author field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"author\");\r",
									"});\r",
									"\r",
									"// Check if the author field has an id field\r",
									"pm.test(\"Author field has an id field\", function () {\r",
									"    pm.expect(pm.response.json().author).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"// Check if the author field has a name field\r",
									"pm.test(\"Author field has a name field\", function () {\r",
									"    pm.expect(pm.response.json().author).to.have.property(\"name\");\r",
									"});\r",
									"\r",
									"// Check if the author field has an email field\r",
									"pm.test(\"Author field has an email field\", function () {\r",
									"    pm.expect(pm.response.json().author).to.have.property(\"email\");\r",
									"});\r",
									"\r",
									"// Check if the response has a title field\r",
									"pm.test(\"Response has a title field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"title\");\r",
									"});\r",
									"\r",
									"// Check if the response has a text field\r",
									"pm.test(\"Response has a text field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"text\");\r",
									"});\r",
									"\r",
									"// Check if the response has a created field\r",
									"pm.test(\"Response has a created field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Событие\",\r\n    \"text\": \"Хочу посетить не один - ищу компанию\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/users/3/events/113/comments",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"users",
								"3",
								"events",
											"113",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateWrongComment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка статуса ответа\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Событие\",\r\n    \"text\": \"Хочу посетить не один - ищу компанию\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/users/3/events/113/comments",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"users",
								"3",
								"events",
								"113",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetEvent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка статуса ответа\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Проверка структуры ответа\r",
									"let jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has all required fields\", function () {\r",
									"    pm.expect(jsonResponse).to.have.property(\"id\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"annotation\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"category\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"confirmedRequests\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"createdOn\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"description\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"eventDate\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"initiator\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"location\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"paid\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"participantLimit\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"publishedOn\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"requestModeration\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"state\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"title\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"views\");\r",
									"});\r",
									"\r",
									"// Проверка значений некоторых полей\r",
									"pm.test(\"Check specific field values\", function () {\r",
									"    pm.expect(jsonResponse.id).to.eql(113);\r",
									"});\r",
									"\r",
									"pm.test(\"Check comments array content\", function () {\r",
									"    pm.expect(jsonResponse.comments).to.be.an(\"array\").that.is.not.empty;\r",
									"    \r",
									"    // Проверка первого комментария\r",
									"    let firstComment = jsonResponse.comments[0];\r",
									"    pm.expect(firstComment).to.have.property(\"id\");\r",
									"    pm.expect(firstComment).to.have.property(\"author\");\r",
									"    pm.expect(firstComment).to.have.property(\"title\");\r",
									"    pm.expect(firstComment).to.have.property(\"text\");\r",
									"    pm.expect(firstComment).to.have.property(\"created\");\r",
									"    \r",
									"    // Проверка значений полей первого комментария\r",
									"    pm.expect(firstComment.id).to.eql(1);\r",
									"    pm.expect(firstComment.author.id).to.eql(3);\r",
									"    pm.expect(firstComment.title).to.eql(\"Событие\");\r",
									"    pm.expect(firstComment.text).to.eql(\"Хочу посетить не один - ищу компанию\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{localhost}}/events/113",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"events",
								"113"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateComment2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка статуса ответа\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Check if the response has an id field\r",
									"pm.test(\"Response has an id field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"// Check if the response has an author field\r",
									"pm.test(\"Response has an author field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"author\");\r",
									"});\r",
									"\r",
									"// Check if the author field has an id field\r",
									"pm.test(\"Author field has an id field\", function () {\r",
									"    pm.expect(pm.response.json().author).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"// Check if the author field has a name field\r",
									"pm.test(\"Author field has a name field\", function () {\r",
									"    pm.expect(pm.response.json().author).to.have.property(\"name\");\r",
									"});\r",
									"\r",
									"// Check if the author field has an email field\r",
									"pm.test(\"Author field has an email field\", function () {\r",
									"    pm.expect(pm.response.json().author).to.have.property(\"email\");\r",
									"});\r",
									"\r",
									"// Check if the response has a title field\r",
									"pm.test(\"Response has a title field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"title\");\r",
									"});\r",
									"\r",
									"// Check if the response has a text field\r",
									"pm.test(\"Response has a text field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"text\");\r",
									"});\r",
									"\r",
									"// Check if the response has a created field\r",
									"pm.test(\"Response has a created field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Лайк! Хочу исчо\",\r\n    \"text\": \"Приходите,и Вам понравится\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/users/5/events/113/comments",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"users",
								"5",
								"events",
								"113",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateComment1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка статуса ответа\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check if the response has an id field\r",
									"pm.test(\"Response has an id field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"// Check if the response has an author field\r",
									"pm.test(\"Response has an author field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"author\");\r",
									"});\r",
									"\r",
									"// Check if the author field has an id field\r",
									"pm.test(\"Author field has an id field\", function () {\r",
									"    pm.expect(pm.response.json().author).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"// Check if the author field has a name field\r",
									"pm.test(\"Author field has a name field\", function () {\r",
									"    pm.expect(pm.response.json().author).to.have.property(\"name\");\r",
									"});\r",
									"\r",
									"// Check if the author field has an email field\r",
									"pm.test(\"Author field has an email field\", function () {\r",
									"    pm.expect(pm.response.json().author).to.have.property(\"email\");\r",
									"});\r",
									"\r",
									"// Check if the response has a title field\r",
									"pm.test(\"Response has a title field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"title\");\r",
									"});\r",
									"\r",
									"// Check if the response has a text field\r",
									"pm.test(\"Response has a text field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"text\");\r",
									"});\r",
									"\r",
									"// Check if the response has a created field\r",
									"pm.test(\"Response has a created field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Событие понравилось очень\",\r\n    \"text\": \"Приду исчо\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/users/3/comments/1",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"users",
								"3",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateComment3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка статуса ответа\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Check if the response has an id field\r",
									"pm.test(\"Response has an id field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"// Check if the response has an author field\r",
									"pm.test(\"Response has an author field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"author\");\r",
									"});\r",
									"\r",
									"// Check if the author field has an id field\r",
									"pm.test(\"Author field has an id field\", function () {\r",
									"    pm.expect(pm.response.json().author).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"// Check if the author field has a name field\r",
									"pm.test(\"Author field has a name field\", function () {\r",
									"    pm.expect(pm.response.json().author).to.have.property(\"name\");\r",
									"});\r",
									"\r",
									"// Check if the author field has an email field\r",
									"pm.test(\"Author field has an email field\", function () {\r",
									"    pm.expect(pm.response.json().author).to.have.property(\"email\");\r",
									"});\r",
									"\r",
									"// Check if the response has a title field\r",
									"pm.test(\"Response has a title field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"title\");\r",
									"});\r",
									"\r",
									"// Check if the response has a text field\r",
									"pm.test(\"Response has a text field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"text\");\r",
									"});\r",
									"\r",
									"// Check if the response has a created field\r",
									"pm.test(\"Response has a created field\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Событие понравилось\",\r\n    \"text\": \"Событие понравилось.Лайк\"\r\n}"
						},
						"url": {
							"raw": "{{localhost}}/users/1/events/113/comments",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"users",
								"1",
								"events",
								"113",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteComment3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка статуса ответа\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{localhost}}/users/1/comments/3",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"users",
								"1",
								"comments",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetEventOnComment2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверка статуса ответа\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Проверка структуры ответа\r",
									"let jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has all required fields\", function () {\r",
									"    pm.expect(jsonResponse).to.have.property(\"id\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"annotation\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"category\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"confirmedRequests\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"createdOn\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"description\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"eventDate\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"initiator\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"location\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"paid\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"participantLimit\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"publishedOn\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"requestModeration\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"state\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"title\");\r",
									"    pm.expect(jsonResponse).to.have.property(\"views\");\r",
									"});\r",
									"\r",
									"// Проверка значений некоторых полей\r",
									"pm.test(\"Check specific field values\", function () {\r",
									"    pm.expect(jsonResponse.id).to.eql(113);\r",
									"    pm.expect(jsonResponse.comments.length).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{localhost}}/events/113",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"events",
								"113"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "localhost",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "localserver",
			"value": "http://localhost:9090",
			"type": "string"
		}
	]
}